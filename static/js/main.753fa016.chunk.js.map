{"version":3,"sources":["realm/RealmApp.tsx","realm/RealmApolloProvider.tsx","components/LoginScreen.tsx","components/Navbar.tsx","graphql-operations.ts","hooks/useTasks.tsx","components/TaskView.tsx","components/TaskCard.tsx","hooks/useDraftTask.tsx","hooks/useTaskLists.tsx","components/TaskLists.tsx","components/TaskDetail.tsx","components/Board.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["app","Realm","id","RealmAppContext","React","undefined","RealmApp","children","appRef","currentUser","user","setUser","current","registerUser","email","password","a","emailPasswordAuth","context","logIn","credentials","emailPassword","logOut","Provider","value","useRealmApp","Error","RealmApolloProvider","createApolloClient","client","setClient","realmAppId","graphql_url","ApolloClient","link","HttpLink","uri","fetch","options","headers","refreshCustomData","authenticatedOptions","Authorization","accessToken","cache","InMemoryCache","LoginScreen","mode","setMode","setEmail","setPassword","setError","error","handleAuthenticationError","err","console","parts","message","split","reason","length","trimStart","status","reasonRegex","match","groups","parseAuthenticationError","prevErr","handleLogin","e","handleRegistrationAndLogin","isValidEmailAddress","validator","isEmail","Container","Layout","LoginFormRow","LoginHeading","type","label","placeholder","onChange","target","state","errorMessage","variant","onClick","ToggleContainer","ToggleText","ToggleLink","preventDefault","oldMode","styled","div","span","button","uiColors","green","dark2","h1","Navbar","profile","LoggedInUser","size","gray","base","GetAllTasksDocument","gql","AddTaskDocument","UpdateTaskDocument","DeleteTaskDocument","TaskStatus","GetUserDocument","useTasks","baseOptions","tasks","setTasks","loading","onCompleted","data","ApolloReactHooks","useAddTaskMutation","addTaskMutation","useUpdateTaskMutation","updateTaskMutation","useDeleteTaskMutation","deleteTaskMutation","addTask","task","variables","name","_partition","assignee","_id","currentTasks","result","updateTask","taskId","updated","updates","isSpecifiedTask","t","find","updatedTask","filter","deleteTask","actions","TaskView","statusColor","statusColors","get","statusMessage","statusMessages","Row","Assignee","Status","backgroundColor","background","textColor","text","Name","DraftTaskView","draft","draftActions","updateDraft","deleteDraft","saveDraft","DraftInput","disabled","Map","Open","Inprogress","Complete","blue","light3","yellow","TextInput","SubmitButton","props","DeleteButton","image","username","AssigneeContainer","Avatar","src","Username","TaskCard","DraftTaskCard","useDraftTask","taskActions","setDraft","draftUser","setDraftUser","userId","createDraft","updatedDraft","BSON","ObjectId","isStatus","isOpenTask","isInProgressTask","isCompleteTask","getTask","findListForStatus","R","useTaskLists","openTasks","inProgressTasks","completeTasks","displayName","displayOrder","map","createLists","lists","setLists","updateListsWithNewTasks","list","addTasksToList","listToUpdate","updatedDisplayOrder","prevLists","Array","from","Set","addTaskToList","displayIndex","removeTaskFromList","moveTask","oldStatus","oldDisplayIndex","newStatus","newDisplayIndex","moveTaskInColumn","newIndex","oldIndex","findIndex","useOrderedListActions","previousTasksRef","previousTasks","updatedTasks","newTasks","Boolean","removedTasks","modifiedTasks","isNewTask","isRemovedTask","Object","entries","reduce","grouped","forEach","removedTask","modifiedTask","l","handleDragAndDrop","dragDropResult","draggableId","source","destination","sourceStatus","droppableId","sourceIndex","index","destinationStatus","destinationIndex","taskStatus","undoDragAndDrop","TaskLists","showDetail","listActions","onDragEnd","catch","TaskList","key","TaskListsContainer","css","provided","ref","innerRef","droppableProps","ListContainer","ListTitle","i","ListItem","ListButton","h2","black","light1","DraggableListItem","draggableProps","dragHandleProps","white","light2","TaskDetailModal","closeModal","changeTaskStatus","PositionedModal","open","shouldClose","FullWidthButton","Modal","Button","Board","currentTask","setCurrentTask","updateCurrentTask","close","show","useTaskDetailView","TaskDetailView","TaskBoard","App","AppContainer","RequireAuthentication","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.753fa016.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport * as Realm from \"realm-web\";\r\n\r\nconst REALM_APP_ID = \"task-tracker-tutorial-orcbr\";\r\nconst app = new Realm.App({ id: REALM_APP_ID });\r\n\r\nconst RealmAppContext = React.createContext<IRealmApp | void>(undefined);\r\n\r\ninterface IRealmApp {\r\n  id: string;\r\n  user: Realm.User | null;\r\n  logIn: (email: string, password: string) => Promise<void>;\r\n  logOut: () => Promise<void>;\r\n  registerUser(email: string, password: string): Promise<void>;\r\n}\r\n\r\nconst RealmApp: React.FC = ({ children }) => {\r\n  // Keep track of the current user in local state\r\n  const appRef = React.useRef(app);\r\n  const [user, setUser] = React.useState(app.currentUser);\r\n  React.useEffect(() => {\r\n    setUser(app.currentUser);\r\n  }, [appRef.current.currentUser]);\r\n  \r\n  // Let new users register an account\r\n  const registerUser = async (email: string, password: string) => {\r\n    return await app.emailPasswordAuth.registerUser(email, password);\r\n  }\r\n  \r\n  // Let registered users log in\r\n  const logIn = async (email: string, password: string) => {\r\n    const credentials = Realm.Credentials.emailPassword(email, password);\r\n    await app.logIn(credentials);\r\n    setUser(app.currentUser);\r\n  }\r\n  \r\n  // Let logged in users log out\r\n  const logOut = async () => {\r\n    await app.currentUser?.logOut();\r\n    setUser(app.currentUser);\r\n  }\r\n  \r\n  // Provide the current user and authentication methods to the wrapped tree\r\n  const context: IRealmApp = {\r\n    id: REALM_APP_ID,\r\n    user,\r\n    logIn,\r\n    logOut,\r\n    registerUser,\r\n  };\r\n  return (\r\n    <RealmAppContext.Provider value={context}>\r\n      {children}\r\n    </RealmAppContext.Provider>\r\n  );\r\n};\r\nexport default RealmApp;\r\n\r\nexport const useRealmApp = (): IRealmApp => {\r\n  const app = React.useContext(RealmAppContext);\r\n  if (!app) {\r\n    throw new Error(\"You must call useRealmApp() inside of a <RealmApp />.\");\r\n  }\r\n  return app;\r\n};\r\n","import * as React from \"react\";\r\nimport * as Realm from \"realm-web\";\r\nimport { useRealmApp } from \"./RealmApp\";\r\n\r\n// Apollo\r\nimport {\r\n  ApolloProvider,\r\n  ApolloClient,\r\n  HttpLink,\r\n  InMemoryCache,\r\n} from \"@apollo/client\";\r\nimport { NormalizedCacheObject } from \"@apollo/client/cache\";\r\n\r\nconst RealmApolloProvider: React.FC = ({ children }) => {\r\n  const { id, user } = useRealmApp();\r\n  const [client, setClient] = React.useState(\r\n    createApolloClient(id, user as Realm.User)\r\n  );\r\n  React.useEffect(() => {\r\n    setClient(createApolloClient(id, user as Realm.User));\r\n  }, [id, user]);\r\n\r\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\r\n};\r\nexport default RealmApolloProvider;\r\n\r\n// TODO: Implement createApolloClient()\r\nfunction createApolloClient(\r\n  realmAppId: string,\r\n  user: Realm.User\r\n): ApolloClient<NormalizedCacheObject> {\r\n  const graphql_url = `https://realm.mongodb.com/api/client/v2.0/app/${realmAppId}/graphql`;\r\n  \r\n  const client = new ApolloClient({\r\n    link: new HttpLink({\r\n      uri: graphql_url,\r\n      fetch: async (uri: RequestInfo, options: RequestInit) => {\r\n        if (!options.headers) {\r\n          options.headers = {} as Record<string, string>;\r\n        }\r\n        // Refreshing custom data also ensures a valid access token\r\n        await user.refreshCustomData();\r\n        const authenticatedOptions: RequestInit = {\r\n          ...options,\r\n          headers: {\r\n            ...options.headers,\r\n            Authorization: `Bearer ${user.accessToken}`\r\n          }\r\n        }\r\n        return fetch(uri, authenticatedOptions);\r\n      },\r\n    }),\r\n    cache: new InMemoryCache(),\r\n  });\r\n\r\n  return client\r\n}\r\n","import * as React from \"react\";\r\nimport { useRealmApp } from \"../realm/RealmApp\";\r\n\r\nimport styled from \"@emotion/styled\";\r\nimport Button from \"@leafygreen-ui/button\";\r\nimport TextInput from \"@leafygreen-ui/text-input\";\r\nimport Card from \"@leafygreen-ui/card\";\r\nimport { uiColors } from \"@leafygreen-ui/palette\";\r\nimport validator from \"validator\";\r\n\r\nconst LoginScreen: React.FC = () => {\r\n  const app = useRealmApp();\r\n\r\n  // Toggle between logging users in and registering new users\r\n  const [mode, setMode] = React.useState<\"login\" | \"register\">(\"login\");\r\n  const toggleMode = () => {\r\n    setMode((oldMode) => (oldMode === \"login\" ? \"register\" : \"login\"));\r\n  };\r\n\r\n  // Keep track of form input state\r\n  const [email, setEmail] = React.useState<string>(\"\");\r\n  const [password, setPassword] = React.useState<string>(\"\");\r\n  // Whenever the mode changes, clear the form inputs\r\n  React.useEffect(() => {\r\n    setEmail(\"\");\r\n    setPassword(\"\");\r\n    setError({});\r\n  }, [mode]);\r\n  // Keep track of input validation/errors\r\n  const [error, setError] = React.useState<{\r\n    email?: string;\r\n    password?: string;\r\n  }>({});\r\n\r\n  function handleAuthenticationError(err: Error) {\r\n    console.error(err);\r\n    const { status, message } = parseAuthenticationError(err);\r\n    const errorType = message || status;\r\n    switch (errorType) {\r\n      case \"invalid username\":\r\n        setError((prevErr) => ({ ...prevErr, email: \"Invalid email address.\" }));\r\n        break;\r\n      case \"invalid username/password\":\r\n      case \"invalid password\":\r\n      case \"401\":\r\n        setError((err) => ({ ...err, password: \"Incorrect password.\" }));\r\n        break;\r\n      case \"name already in use\":\r\n      case \"409\":\r\n        setError((err) => ({ ...err, email: \"Email is already registered.\" }));\r\n        break;\r\n      case \"password must be between 6 and 128 characters\":\r\n      case \"400\":\r\n        setError((err) => ({\r\n          ...err,\r\n          password: \"Password must be between 6 and 128 characters.\",\r\n        }));\r\n        break;\r\n    }\r\n  }\r\n\r\n  const handleLogin = async () => {\r\n    setError((e) => ({ ...e, password: undefined }));\r\n    try {\r\n      return await app.logIn(email, password);\r\n    } catch (err) {\r\n      handleAuthenticationError(err);\r\n    }\r\n  };\r\n\r\n  const handleRegistrationAndLogin = async () => {\r\n    const isValidEmailAddress = validator.isEmail(email);\r\n    setError((e) => ({ ...e, password: undefined }));\r\n    if (isValidEmailAddress) {\r\n      try {\r\n        // Register the user and, if successful, log them in\r\n        await app.registerUser(email, password);\r\n        return await handleLogin();\r\n      } catch (err) {\r\n        handleAuthenticationError(err);\r\n      }\r\n    } else {\r\n      setError((err) => ({ ...err, email: \"Email is invalid.\" }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Card>\r\n        <Layout>\r\n          <LoginFormRow>\r\n            <LoginHeading>\r\n              {mode === \"login\" ? \"Log In\" : \"Register an Account\"}\r\n            </LoginHeading>\r\n          </LoginFormRow>\r\n          <LoginFormRow>\r\n            <TextInput\r\n              type=\"email\"\r\n              label=\"Email\"\r\n              placeholder=\"your.email@example.com\"\r\n              onChange={(e) => {\r\n                setError((e) => ({ ...e, email: undefined }));\r\n                setEmail(e.target.value);\r\n              }}\r\n              value={email}\r\n              state={\r\n                error.email\r\n                  ? \"error\"\r\n                  : validator.isEmail(email)\r\n                  ? \"valid\"\r\n                  : \"none\"\r\n              }\r\n              errorMessage={error.email}\r\n            />\r\n          </LoginFormRow>\r\n          <LoginFormRow>\r\n            <TextInput\r\n              type=\"password\"\r\n              label=\"Password\"\r\n              onChange={(e) => {\r\n                setPassword(e.target.value);\r\n              }}\r\n              value={password}\r\n              state={\r\n                error.password ? \"error\" : error.password ? \"valid\" : \"none\"\r\n              }\r\n              errorMessage={error.password}\r\n            />\r\n          </LoginFormRow>\r\n          {mode === \"login\" ? (\r\n            <Button variant=\"primary\" onClick={() => handleLogin()}>\r\n              Log In\r\n            </Button>\r\n          ) : (\r\n            <Button\r\n              variant=\"primary\"\r\n              onClick={() => handleRegistrationAndLogin()}\r\n            >\r\n              Register\r\n            </Button>\r\n          )}\r\n          <ToggleContainer>\r\n            <ToggleText>\r\n              {mode === \"login\"\r\n                ? \"Don't have an account?\"\r\n                : \"Already have an account?\"}\r\n            </ToggleText>\r\n            <ToggleLink\r\n              onClick={(e: React.MouseEvent) => {\r\n                e.preventDefault();\r\n                toggleMode();\r\n              }}\r\n            >\r\n              {mode === \"login\" ? \"Register one now.\" : \"Log in instead.\"}\r\n            </ToggleLink>\r\n          </ToggleContainer>\r\n        </Layout>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\nexport default LoginScreen;\r\n\r\nfunction parseAuthenticationError(err: Error) {\r\n  const parts = err.message.split(\":\");\r\n  const reason = parts[parts.length - 1].trimStart();\r\n  if (!reason) return { status: \"\", message: \"\" };\r\n  const reasonRegex = /(?<message>.+)\\s\\(status (?<status>[0-9][0-9][0-9])/;\r\n  const match = reason.match(reasonRegex);\r\n  const { status, message } = match?.groups ?? {};\r\n  return { status, message };\r\n}\r\n\r\nconst ToggleContainer = styled.div`\r\n  margin-top: 8px;\r\n  font-size: 12px;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst ToggleText = styled.span`\r\n  line-height: 18px;\r\n`;\r\n\r\nconst ToggleLink = styled.button`\r\n  background: none;\r\n  border: none;\r\n  font-size: 12px;\r\n  color: ${uiColors.green.dark2};\r\n`;\r\n\r\nconst Container = styled.div`\r\n  height: 100vh;\r\n  justify-content: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Layout = styled.div`\r\n  padding: 8px;\r\n  color: black;\r\n  width: 400px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: left;\r\n`;\r\n\r\nconst LoginHeading = styled.h1`\r\n  margin: 0;\r\n  font-size: 32px;\r\n`;\r\n\r\nconst LoginFormRow = styled.div`\r\n  margin-bottom: 16px;\r\n`;\r\n","import * as React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { useRealmApp } from \"../realm/RealmApp\";\r\nimport Button from \"@leafygreen-ui/button\";\r\nimport { uiColors } from \"@leafygreen-ui/palette\";\r\n\r\nconst Navbar: React.FC = () => {\r\n  const { user, logOut } = useRealmApp();\r\n  const profile: Realm.UserProfile | undefined = user?.profile\r\n  const email = profile?.email;\r\n  return (\r\n    <Container>\r\n      <LoggedInUser>{email}</LoggedInUser>\r\n      <Button size=\"xsmall\" onClick={() => logOut()}>\r\n        Logout\r\n      </Button>\r\n    </Container>\r\n  );\r\n};\r\nexport default Navbar;\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  height: 64px;\r\n  background: ${uiColors.gray.base};\r\n  font-size: 16px;\r\n  color: black;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 8px 0;\r\n`;\r\n\r\nconst LoggedInUser = styled.div`\r\n  padding-bottom: 8px;\r\n`;\r\n","import * as Types from './types';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/client';\n\n\nexport const GetAllTasksDocument = gql`\n    query GetAllTasks {\n  tasks {\n    _id\n    name\n    status\n    assignee {\n      _id\n      name\n      image\n    }\n  }\n}\n    `;\n\n/**\n * __useGetAllTasksQuery__\n *\n * To run a query within a React component, call `useGetAllTasksQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllTasksQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllTasksQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<Types.GetAllTasksQuery, Types.GetAllTasksQueryVariables>) {\n        return ApolloReactHooks.useQuery<Types.GetAllTasksQuery, Types.GetAllTasksQueryVariables>(GetAllTasksDocument, baseOptions);\n      }\nexport function useGetAllTasksLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<Types.GetAllTasksQuery, Types.GetAllTasksQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<Types.GetAllTasksQuery, Types.GetAllTasksQueryVariables>(GetAllTasksDocument, baseOptions);\n        }\nexport type GetAllTasksQueryHookResult = ReturnType<typeof useGetAllTasksQuery>;\nexport type GetAllTasksLazyQueryHookResult = ReturnType<typeof useGetAllTasksLazyQuery>;\nexport type GetAllTasksQueryResult = ApolloReactCommon.QueryResult<Types.GetAllTasksQuery, Types.GetAllTasksQueryVariables>;\nexport const AddTaskDocument = gql`\n    mutation AddTask($task: TaskInsertInput!) {\n  task: insertOneTask(data: $task) {\n    _id\n    name\n    status\n    assignee {\n      _id\n      name\n      image\n    }\n  }\n}\n    `;\nexport type AddTaskMutationFn = ApolloReactCommon.MutationFunction<Types.AddTaskMutation, Types.AddTaskMutationVariables>;\n\n/**\n * __useAddTaskMutation__\n *\n * To run a mutation, you first call `useAddTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addTaskMutation, { data, loading, error }] = useAddTaskMutation({\n *   variables: {\n *      task: // value for 'task'\n *   },\n * });\n */\nexport function useAddTaskMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<Types.AddTaskMutation, Types.AddTaskMutationVariables>) {\n        return ApolloReactHooks.useMutation<Types.AddTaskMutation, Types.AddTaskMutationVariables>(AddTaskDocument, baseOptions);\n      }\nexport type AddTaskMutationHookResult = ReturnType<typeof useAddTaskMutation>;\nexport type AddTaskMutationResult = ApolloReactCommon.MutationResult<Types.AddTaskMutation>;\nexport type AddTaskMutationOptions = ApolloReactCommon.BaseMutationOptions<Types.AddTaskMutation, Types.AddTaskMutationVariables>;\nexport const UpdateTaskDocument = gql`\n    mutation UpdateTask($taskId: ObjectId!, $updates: TaskUpdateInput!) {\n  task: updateOneTask(query: {_id: $taskId}, set: $updates) {\n    _id\n    name\n    status\n    assignee {\n      _id\n      name\n      image\n    }\n  }\n}\n    `;\nexport type UpdateTaskMutationFn = ApolloReactCommon.MutationFunction<Types.UpdateTaskMutation, Types.UpdateTaskMutationVariables>;\n\n/**\n * __useUpdateTaskMutation__\n *\n * To run a mutation, you first call `useUpdateTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateTaskMutation, { data, loading, error }] = useUpdateTaskMutation({\n *   variables: {\n *      taskId: // value for 'taskId'\n *      updates: // value for 'updates'\n *   },\n * });\n */\nexport function useUpdateTaskMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<Types.UpdateTaskMutation, Types.UpdateTaskMutationVariables>) {\n        return ApolloReactHooks.useMutation<Types.UpdateTaskMutation, Types.UpdateTaskMutationVariables>(UpdateTaskDocument, baseOptions);\n      }\nexport type UpdateTaskMutationHookResult = ReturnType<typeof useUpdateTaskMutation>;\nexport type UpdateTaskMutationResult = ApolloReactCommon.MutationResult<Types.UpdateTaskMutation>;\nexport type UpdateTaskMutationOptions = ApolloReactCommon.BaseMutationOptions<Types.UpdateTaskMutation, Types.UpdateTaskMutationVariables>;\nexport const DeleteTaskDocument = gql`\n    mutation DeleteTask($taskId: ObjectId!) {\n  deletedTask: deleteOneTask(query: {_id: $taskId}) {\n    _id\n    name\n    status\n    assignee {\n      _id\n      name\n      image\n    }\n  }\n}\n    `;\nexport type DeleteTaskMutationFn = ApolloReactCommon.MutationFunction<Types.DeleteTaskMutation, Types.DeleteTaskMutationVariables>;\n\n/**\n * __useDeleteTaskMutation__\n *\n * To run a mutation, you first call `useDeleteTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTaskMutation, { data, loading, error }] = useDeleteTaskMutation({\n *   variables: {\n *      taskId: // value for 'taskId'\n *   },\n * });\n */\nexport function useDeleteTaskMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<Types.DeleteTaskMutation, Types.DeleteTaskMutationVariables>) {\n        return ApolloReactHooks.useMutation<Types.DeleteTaskMutation, Types.DeleteTaskMutationVariables>(DeleteTaskDocument, baseOptions);\n      }\nexport type DeleteTaskMutationHookResult = ReturnType<typeof useDeleteTaskMutation>;\nexport type DeleteTaskMutationResult = ApolloReactCommon.MutationResult<Types.DeleteTaskMutation>;\nexport type DeleteTaskMutationOptions = ApolloReactCommon.BaseMutationOptions<Types.DeleteTaskMutation, Types.DeleteTaskMutationVariables>;\nexport const GetUserDocument = gql`\n    query GetUser($userId: String!) {\n  user(query: {_id: $userId}) {\n    _id\n    name\n    image\n  }\n}\n    `;\n\n/**\n * __useGetUserQuery__\n *\n * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useGetUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<Types.GetUserQuery, Types.GetUserQueryVariables>) {\n        return ApolloReactHooks.useQuery<Types.GetUserQuery, Types.GetUserQueryVariables>(GetUserDocument, baseOptions);\n      }\nexport function useGetUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<Types.GetUserQuery, Types.GetUserQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<Types.GetUserQuery, Types.GetUserQueryVariables>(GetUserDocument, baseOptions);\n        }\nexport type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>;\nexport type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>;\nexport type GetUserQueryResult = ApolloReactCommon.QueryResult<Types.GetUserQuery, Types.GetUserQueryVariables>;","import * as React from \"react\";\r\nimport { Task, User } from \"../types\";\r\n\r\nimport { GetAllTasksQuery, AddTaskMutationVariables } from \"./../types\";\r\nimport {\r\n  useGetAllTasksQuery,\r\n  useAddTaskMutation,\r\n  useUpdateTaskMutation,\r\n  useDeleteTaskMutation,\r\n} from \"./../graphql-operations\";\r\n\r\nexport enum TaskStatus {\r\n  Complete = 'COMPLETE',\r\n  Open = 'OPEN',\r\n  Inprogress = 'INPROGRESS'\r\n}\r\n\r\ninterface UpdatedTask {\r\n  status?: TaskStatus;\r\n  name?: string;\r\n  assignee?: User;\r\n}\r\n\r\nexport interface TaskActions {\r\n  addTask: (task: Task) => Promise<void>;\r\n  updateTask: (taskId: string, updated: UpdatedTask) => Promise<void>;\r\n  deleteTask: (task: Task) => Promise<void>;\r\n}\r\n\r\nexport function useTasks(): {\r\n  tasks: Array<Task>;\r\n  loading: boolean;\r\n  actions: TaskActions;\r\n} {\r\n  const [tasks, setTasks] = React.useState<Task[]>([]);\r\n  // Query for Tasks\r\n  const { loading } = useGetAllTasksQuery({\r\n    onCompleted: (data: GetAllTasksQuery) => {\r\n      if (data?.tasks) {\r\n        setTasks(data.tasks as Task[]);\r\n      }\r\n    },\r\n  });\r\n\r\n  // Create Task Mutation Functions\r\n  const [addTaskMutation] = useAddTaskMutation();\r\n  const [updateTaskMutation] = useUpdateTaskMutation();\r\n  const [deleteTaskMutation] = useDeleteTaskMutation();\r\n\r\n  const addTask = async (task: Task) => {\r\n    const variables: AddTaskMutationVariables = {\r\n      task: {\r\n        status: task.status,\r\n        name: task.name,\r\n        _partition: \"My Project\",\r\n      },\r\n    };\r\n    if(task.assignee) {\r\n      variables.task.assignee = { link: task.assignee._id }\r\n    }\r\n    const currentTasks = [...tasks];\r\n    try {\r\n      const result = await addTaskMutation({ variables });\r\n      const task = result.data?.task as Task;\r\n      setTasks([...tasks, task]);\r\n    } catch (err) {\r\n      setTasks(currentTasks);\r\n      throw new Error(`Unable to add task: ${err}`);\r\n    }\r\n  };\r\n\r\n  const updateTask = async (taskId: string, updated: UpdatedTask) => {\r\n    const variables = {\r\n      taskId: taskId,\r\n      updates: {\r\n        status: updated?.status ?? undefined,\r\n        name: updated?.name ?? undefined,\r\n        assignee: updated.assignee\r\n          ? { link: updated.assignee._id }\r\n          : undefined,\r\n      },\r\n    };\r\n    const isSpecifiedTask = (t: Task) => t._id === taskId;\r\n    const currentTasks = [...tasks];\r\n    const currentTask = currentTasks.find(isSpecifiedTask);\r\n    if (!currentTask) {\r\n      return;\r\n    }\r\n    try {\r\n      const result = await updateTaskMutation({ variables });\r\n      const updatedTask: Task = result.data?.task as Task;\r\n      setTasks([...tasks.filter((t) => !isSpecifiedTask(t)), updatedTask]);\r\n    } catch (err) {\r\n      setTasks(currentTasks);\r\n      throw new Error(\"Unable to update task\");\r\n    }\r\n  };\r\n\r\n  const deleteTask = async (task: Task) => {\r\n    const variables = { taskId: task._id };\r\n    const currentTasks = [...tasks];\r\n    try {\r\n      await deleteTaskMutation({ variables });\r\n      setTasks([...tasks.filter((t) => t._id !== task._id)]);\r\n    } catch (err) {\r\n      setTasks(currentTasks);\r\n      throw new Error(\"Unable to delete task\");\r\n    }\r\n  };\r\n\r\n  return {\r\n    tasks,\r\n    loading,\r\n    actions: {\r\n      addTask,\r\n      updateTask,\r\n      deleteTask,\r\n    },\r\n  };\r\n}\r\n","import * as React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { Task, User } from \"../types\";\r\nimport { TaskStatus } from \"../hooks/useTasks\";\r\nimport { DraftTask, DraftTaskActions } from \"../hooks/useDraftTask\";\r\nimport Button from \"@leafygreen-ui/button\";\r\nimport TextInput from \"@leafygreen-ui/text-input\";\r\nimport { uiColors } from \"@leafygreen-ui/palette\";\r\n\r\ninterface TaskViewProps {\r\n  task: Task;\r\n}\r\n\r\nexport function TaskView({ task }: TaskViewProps) {\r\n  const { assignee, name } = task;\r\n  const status = task.status as TaskStatus;\r\n  const statusColor = statusColors.get(status);\r\n  const statusMessage = statusMessages.get(status);\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Assignee user={assignee} />\r\n        <Status\r\n          backgroundColor={statusColor?.background}\r\n          textColor={statusColor?.text}\r\n        >\r\n          {statusMessage}\r\n        </Status>\r\n      </Row>\r\n      <Row>\r\n        <Name>\r\n          <span>{name}</span>\r\n        </Name>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n\r\ntype DraftTaskViewProps = {\r\n  draft: DraftTask;\r\n  draftActions: DraftTaskActions;\r\n};\r\n\r\nexport function DraftTaskView({\r\n  draft,\r\n  draftActions,\r\n}: DraftTaskViewProps): React.ReactElement {\r\n  const { status, name } = draft;\r\n  const { updateDraft, deleteDraft, saveDraft } = draftActions;\r\n  const statusColor = statusColors.get(status);\r\n  const statusMessage = statusMessages.get(status);\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Status\r\n          backgroundColor={statusColor?.background}\r\n          textColor={statusColor?.text}\r\n        >\r\n          {statusMessage}\r\n        </Status>\r\n      </Row>\r\n      <Row>\r\n        <DraftInput\r\n          placeholder=\"Enter a task...\"\r\n          onChange={(e) => {\r\n            updateDraft({\r\n              ...draft,\r\n              name: e.target.value,\r\n            });\r\n          }}\r\n          value={name}\r\n        />\r\n      </Row>\r\n      <Row>\r\n        <DeleteButton\r\n          onClick={() => {\r\n            deleteDraft();\r\n          }}\r\n        >\r\n          Delete\r\n        </DeleteButton>\r\n        <SubmitButton\r\n          onClick={async () => {\r\n            await saveDraft();\r\n          }}\r\n          disabled={!draft.name}\r\n        >\r\n          Add\r\n        </SubmitButton>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n\r\nconst statusMessages = new Map<TaskStatus, string>([\r\n  [TaskStatus.Open, \"Open\"],\r\n  [TaskStatus.Inprogress, \"In Progress\"],\r\n  [TaskStatus.Complete, \"Complete\"],\r\n]);\r\n\r\ntype StatusColor = { background: string; text: string };\r\n\r\nconst statusColors = new Map<TaskStatus, StatusColor>([\r\n  [\r\n    TaskStatus.Open,\r\n    { background: uiColors.blue.base, text: uiColors.gray.light3 },\r\n  ],\r\n  [\r\n    TaskStatus.Inprogress,\r\n    { background: uiColors.yellow.base, text: uiColors.gray.dark2 },\r\n  ],\r\n  [\r\n    TaskStatus.Complete,\r\n    { background: uiColors.green.base, text: uiColors.gray.light3 },\r\n  ],\r\n]);\r\n\r\nconst DraftInput = styled(TextInput)`\r\n  width: 100%;\r\n`;\r\n\r\ninterface ButtonProps {\r\n  disabled?: boolean;\r\n  onClick?: () => void;\r\n}\r\n\r\nconst SubmitButton: React.FC<ButtonProps> = (props) => (\r\n  <Button variant=\"primary\" {...props}>\r\n    Add\r\n  </Button>\r\n);\r\n\r\nconst DeleteButton: React.FC<ButtonProps> = (props) => (\r\n  <Button variant=\"danger\" {...props}>\r\n    Delete\r\n  </Button>\r\n);\r\n\r\ninterface AssigneeProps {\r\n  user?: User | null;\r\n}\r\n\r\nfunction Assignee({ user }: AssigneeProps) {\r\n  const image = user?.image || \"./no-avatar.png\";\r\n  const username = user?.name || \"No assignee\";\r\n  return (\r\n    <AssigneeContainer>\r\n      <Avatar src={image} />\r\n      <Username>{username}</Username>\r\n    </AssigneeContainer>\r\n  );\r\n}\r\nconst AssigneeContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding-right: 16px;\r\n  border-radius: 500px;\r\n  border: 0.5px solid transparent;\r\n`;\r\n\r\nconst Username = styled.div`\r\n  font-size: 16px;\r\n`;\r\n\r\nconst Avatar = styled.div<{ src: string }>(\r\n  (props) => `\r\n    background-image: url('${props.src}');\r\n    /* make a square container */\r\n    width: 24px;\r\n    height: 24px;\r\n    /* fill the container, preserving aspect ratio, and cropping to fit */\r\n    background-size: cover;\r\n    /* center the image vertically and horizontally */\r\n    background-position: top center;\r\n    /* round the edges to a circle with border radius 1/2 container size */\r\n    border-radius: 50%;\r\n    margin-right: 8px;\r\n`\r\n);\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  :not(:last-child) {\r\n    margin-bottom: 8px;\r\n  }\r\n`;\r\n\r\nconst Name = styled.div`\r\n  font-size: 24px;\r\n  margin: 0;\r\n  text-align: left;\r\n`;\r\n\r\nconst Status = styled.div<{\r\n  backgroundColor?: string;\r\n  textColor?: string;\r\n}>(\r\n  (props) => `\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  line-height: 12px;\r\n  text-align: center;\r\n  border-radius: 500px;\r\n  background-color: ${props.backgroundColor || \"lightgray\"};\r\n  padding: 8px 12px;\r\n  margin-left: auto;\r\n  color: ${props.textColor || \"black\"};\r\n  user-select: none;\r\n`\r\n);\r\n","import * as React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { Task } from \"../types\";\r\nimport { DraftTask, DraftTaskActions } from \"../hooks/useDraftTask\";\r\nimport Card from \"@leafygreen-ui/card\";\r\n\r\nimport { TaskView, DraftTaskView } from \"./TaskView\";\r\n\r\ninterface TaskCardProps {\r\n  task: Task;\r\n}\r\nexport default function TaskCard({ task }: TaskCardProps): React.ReactElement {\r\n  return (\r\n    <Card>\r\n      <Layout>\r\n        <TaskView task={task} />\r\n      </Layout>\r\n    </Card>\r\n  );\r\n}\r\n\r\ntype DraftTaskCardProps = {\r\n  draft: DraftTask;\r\n  draftActions: DraftTaskActions;\r\n};\r\n\r\nexport function DraftTaskCard({\r\n  draft,\r\n  draftActions,\r\n}: DraftTaskCardProps): React.ReactElement {\r\n  return (\r\n    <Card>\r\n      <Layout>\r\n        <DraftTaskView draft={draft} draftActions={draftActions} />\r\n      </Layout>\r\n    </Card>\r\n  );\r\n}\r\n\r\nconst Layout = styled.div`\r\n  padding: 8px;\r\n  color: black;\r\n`;\r\n","import * as React from \"react\";\r\nimport BSON from \"bson\";\r\nimport { User, GetUserQuery } from \"../types\";\r\nimport { TaskStatus, TaskActions } from \"./useTasks\";\r\nimport { useGetUserQuery } from \"../graphql-operations\";\r\n\r\nexport type DraftTask = {\r\n  status: TaskStatus;\r\n  name: string;\r\n  assignee?: string;\r\n};\r\n\r\nexport interface DraftTaskActions {\r\n  createDraft: (draft: DraftTask) => void;\r\n  updateDraft: (draft: DraftTask) => void;\r\n  deleteDraft: () => void;\r\n  saveDraft: () => Promise<void>;\r\n}\r\n\r\nexport default function useDraftTask(\r\n  currentUser: Realm.User,\r\n  taskActions: TaskActions\r\n): [DraftTask | null, DraftTaskActions] {\r\n  const [draft, setDraft] = React.useState<DraftTask | null>(null);\r\n  const [draftUser, setDraftUser] = React.useState<User | null>(null);\r\n  useGetUserQuery({\r\n    variables: { userId: currentUser.id },\r\n    onCompleted: ({ user }: GetUserQuery) => {\r\n      if (user) {\r\n        setDraftUser(user);\r\n      }\r\n    },\r\n  });\r\n\r\n  const actions: DraftTaskActions = {\r\n    createDraft: (draft: DraftTask) => {\r\n      if (draft) {\r\n        setDraft(draft);\r\n      }\r\n    },\r\n    updateDraft: (updatedDraft: DraftTask) => {\r\n      setDraft(updatedDraft);\r\n    },\r\n    deleteDraft: () => {\r\n      setDraft(null);\r\n    },\r\n    saveDraft: async () => {\r\n      if (draft) {\r\n        await taskActions.addTask({\r\n          ...draft,\r\n          _id: new BSON.ObjectId(),\r\n          assignee: draftUser,\r\n          _partition: \"My Project\",\r\n        });\r\n        setDraft(null);\r\n      }\r\n    },\r\n  };\r\n  return [draft, actions];\r\n}\r\n","import * as React from \"react\";\r\nimport { Task, Scalars } from \"../types\";\r\nimport { TaskStatus } from \"./useTasks\";\r\nimport { taskStatus } from \"../components/TaskLists\";\r\n\r\nimport * as R from \"ramda\";\r\nimport { DropResult } from \"react-beautiful-dnd\";\r\n\r\nfunction isStatus(task: Task, status: TaskStatus) {\r\n  return task.status === status;\r\n}\r\n\r\nconst isOpenTask = (task: Task) => isStatus(task, TaskStatus.Open);\r\nconst isInProgressTask = (task: Task) => isStatus(task, TaskStatus.Inprogress);\r\nconst isCompleteTask = (task: Task) => isStatus(task, TaskStatus.Complete);\r\n\r\ntype TaskListDescription = {\r\n  status: TaskStatus;\r\n  displayName: string;\r\n  tasks: Array<Task>;\r\n  displayOrder: Array<Scalars[\"ObjectId\"]>;\r\n};\r\n\r\nconst createLists = (tasks: Array<Task>) => {\r\n  const openTasks = tasks.filter(isOpenTask);\r\n  const inProgressTasks = tasks.filter(isInProgressTask);\r\n  const completeTasks = tasks.filter(isCompleteTask);\r\n\r\n  return [\r\n    {\r\n      status: TaskStatus.Open,\r\n      displayName: \"Open\",\r\n      tasks: openTasks,\r\n      displayOrder: openTasks.map((t) => t._id),\r\n    },\r\n    {\r\n      status: TaskStatus.Inprogress,\r\n      displayName: \"In Progress\",\r\n      tasks: inProgressTasks,\r\n      displayOrder: inProgressTasks.map((t) => t._id),\r\n    },\r\n    {\r\n      status: TaskStatus.Complete,\r\n      displayName: \"Complete\",\r\n      tasks: completeTasks,\r\n      displayOrder: completeTasks.map((t) => t._id),\r\n    },\r\n  ];\r\n};\r\n\r\nconst getTask = (tasks: Task[], id: Scalars[\"ObjectId\"]): Task | undefined => {\r\n  return tasks.find((task: Task) => task._id === id);\r\n};\r\n\r\ninterface UseTaskListsPayload {\r\n  lists: TaskListDescription[];\r\n  actions: {\r\n    handleDragAndDrop: (dragDropResult: DropResult) => void;\r\n    undoDragAndDrop: (dragDropResult: DropResult) => void;\r\n  };\r\n}\r\n\r\nconst findListForStatus = (status: TaskStatus) =>\r\n  R.find<TaskListDescription>(R.propEq(\"status\", status));\r\n\r\nexport default function useTaskLists(tasks: Task[]): UseTaskListsPayload {\r\n  const [lists, setLists] = React.useState<TaskListDescription[]>(\r\n    createLists(tasks)\r\n  );\r\n  \r\n  const updateListsWithNewTasks = React.useCallback((tasks: Task[]) => {\r\n    setLists((lists: TaskListDescription[]) =>\r\n      lists.map((list) => ({\r\n        ...list,\r\n        tasks: tasks.filter((t) => t.status === list.status),\r\n      }))\r\n    );\r\n  }, []);\r\n\r\n  const {\r\n    addTasksToList,\r\n    removeTaskFromList,\r\n    moveTask,\r\n    moveTaskInColumn,\r\n  }: OrderedListActions = useOrderedListActions({\r\n    lists,\r\n    setLists,\r\n  });\r\n\r\n  const previousTasksRef = React.useRef<Task[] | undefined>();\r\n  React.useEffect(() => {\r\n    if (previousTasksRef.current) {\r\n      const previousTasks = previousTasksRef.current;\r\n      const updatedTasks = tasks;\r\n      const isInPreviousTasks = (newTask: Task) =>\r\n        Boolean(getTask(previousTasks, newTask._id));\r\n      const isInUpdatedTasks = (oldTask: Task) =>\r\n        Boolean(getTask(updatedTasks, oldTask._id));\r\n\r\n      const newTasks = updatedTasks.filter(\r\n        (task: Task) => !isInPreviousTasks(task)\r\n      );\r\n      const removedTasks = previousTasks.filter(\r\n        (task: Task) => !isInUpdatedTasks(task)\r\n      );\r\n      // New tasks and removed tasks can't be modified tasks. Filter them out.\r\n      const modifiedTasks = updatedTasks.filter((task: Task) => {\r\n        const isNewTask = Boolean(getTask(newTasks, task._id));\r\n        const isRemovedTask = Boolean(getTask(removedTasks, task._id));\r\n        if (isNewTask || isRemovedTask) return false;\r\n        const prev = getTask(previousTasks, task._id) as Task;\r\n        const isModified = prev.status !== task.status;\r\n        return isModified;\r\n      });\r\n\r\n      if (newTasks.length || removedTasks.length || modifiedTasks.length) {\r\n        // Add new tasks\r\n        Object.entries<Task[]>(\r\n          newTasks.reduce(\r\n            (grouped, task) => {\r\n              return ({\r\n              ...grouped,\r\n              [task.status]: [...grouped[task.status as TaskStatus], task],\r\n            })},\r\n            {\r\n              [TaskStatus.Open]: [],\r\n              [TaskStatus.Inprogress]: [],\r\n              [TaskStatus.Complete]: [],\r\n            }\r\n          )\r\n        ).forEach(([status, tasks]) => {\r\n          addTasksToList(tasks, status as TaskStatus);\r\n        });\r\n        // Delete removed tasks\r\n        removedTasks.forEach((removedTask) => {\r\n          removeTaskFromList(removedTask._id, removedTask.status as TaskStatus);\r\n        });\r\n        // Update modified tasks\r\n        modifiedTasks.forEach((modifiedTask) => {\r\n          const isThisTask = (t: Task) => t._id === modifiedTask._id;\r\n          const oldStatus = (previousTasks.find(isThisTask) as Task).status;\r\n          const oldIndex = (lists.find(\r\n            (l) => l.status === oldStatus\r\n          ) as TaskListDescription).displayOrder.findIndex(\r\n            (id) => id === modifiedTask._id\r\n          );\r\n          const newStatus = modifiedTask.status;\r\n          moveTask(modifiedTask, oldStatus as TaskStatus, oldIndex, newStatus as TaskStatus);\r\n        });\r\n        updateListsWithNewTasks(tasks);\r\n      }\r\n    }\r\n    previousTasksRef.current = tasks;\r\n  }, [\r\n    tasks,\r\n    lists,\r\n    addTasksToList,\r\n    removeTaskFromList,\r\n    moveTask,\r\n    updateListsWithNewTasks,\r\n  ]);\r\n\r\n  const handleDragAndDrop = (dragDropResult: DropResult) => {\r\n    const { draggableId, source, destination } = dragDropResult;\r\n    if (!destination) return;\r\n\r\n    const taskId = draggableId;\r\n    const task = getTask(tasks, taskId) as Task;\r\n    const { droppableId: sourceStatus, index: sourceIndex } = source;\r\n    const {\r\n      droppableId: destinationStatus,\r\n      index: destinationIndex,\r\n    } = destination;\r\n\r\n    if (sourceStatus === destinationStatus) {\r\n      // Task did not change columns\r\n      if (sourceIndex !== destinationIndex) {\r\n        // Task change position within its column\r\n        moveTaskInColumn(\r\n          task,\r\n          taskStatus.get(sourceStatus) || TaskStatus.Open,\r\n          destinationIndex\r\n        );\r\n      }\r\n    } else {\r\n      // Task was moved to a different column\r\n      moveTask(\r\n        task,\r\n        taskStatus.get(sourceStatus) as TaskStatus,\r\n        sourceIndex,\r\n        taskStatus.get(destinationStatus) as TaskStatus,\r\n        destinationIndex\r\n      );\r\n    }\r\n  };\r\n\r\n  const undoDragAndDrop = (dragDropResult: DropResult) => {\r\n    const source = dragDropResult?.destination;\r\n    const destination = dragDropResult?.source;\r\n    if (source && destination) {\r\n      handleDragAndDrop({ ...dragDropResult, source, destination });\r\n    }\r\n  };\r\n\r\n  return { lists, actions: { handleDragAndDrop, undoDragAndDrop } };\r\n}\r\n\r\ninterface OrderedListActions {\r\n  addTasksToList: (tasks: Task[], status: TaskStatus) => void;\r\n  removeTaskFromList: (task: Task, status: TaskStatus) => void;\r\n  moveTask: (\r\n    task: Task,\r\n    oldStatus: TaskStatus,\r\n    oldDisplayIndex: number,\r\n    newStatus: TaskStatus,\r\n    newDisplayIndex?: number\r\n  ) => void;\r\n  moveTaskInColumn: (task: Task, status: TaskStatus, newIndex: number) => void;\r\n}\r\n\r\nfunction useOrderedListActions({\r\n  lists,\r\n  setLists,\r\n}: {\r\n  lists: TaskListDescription[];\r\n  setLists: React.Dispatch<React.SetStateAction<TaskListDescription[]>>;\r\n}): OrderedListActions {\r\n  const addTasksToList = React.useCallback(\r\n    (tasks: Task[], status: TaskStatus) => {\r\n      const listToUpdate = findListForStatus(status)(lists);\r\n      if (!listToUpdate) return;\r\n      const updatedDisplayOrder = [\r\n        ...listToUpdate.displayOrder,\r\n        ...tasks.map((t) => t._id),\r\n      ];\r\n      setLists((prevLists: TaskListDescription[]) =>\r\n        prevLists.map((list) =>\r\n          status !== list.status\r\n            ? list\r\n            : {\r\n                ...listToUpdate,\r\n                tasks: [...listToUpdate.tasks, ...tasks],\r\n                displayOrder: Array.from(new Set(updatedDisplayOrder)),\r\n              }\r\n        )\r\n      );\r\n    },\r\n    [lists, setLists]\r\n  );\r\n\r\n  const addTaskToList = React.useCallback(\r\n    (task: Task, status: TaskStatus, displayIndex?: number) => {\r\n      const listToUpdate = findListForStatus(status)(lists);\r\n      if (!listToUpdate) return;\r\n      let updatedDisplayOrder: Array<Scalars[\"ObjectId\"]> = [];\r\n      if (displayIndex) {\r\n        updatedDisplayOrder = R.insert(\r\n          displayIndex,\r\n          task._id,\r\n          listToUpdate.displayOrder\r\n        );\r\n      } else {\r\n        updatedDisplayOrder = [...listToUpdate.displayOrder, task._id];\r\n      }\r\n      setLists((prevLists: TaskListDescription[]) =>\r\n        prevLists.map((list) =>\r\n          status !== list.status\r\n            ? list\r\n            : {\r\n                ...listToUpdate,\r\n                tasks: [...listToUpdate.tasks, task],\r\n                displayOrder: Array.from(new Set(updatedDisplayOrder)),\r\n              }\r\n        )\r\n      );\r\n    },\r\n    [lists, setLists]\r\n  );\r\n\r\n  const removeTaskFromList = React.useCallback(\r\n    (task: Task, status: TaskStatus) => {\r\n      const listToUpdate = findListForStatus(status)(lists);\r\n      if (!listToUpdate) return;\r\n      const updatedDisplayOrder: Array<\r\n        Scalars[\"ObjectId\"]\r\n      > = listToUpdate.displayOrder.filter((id) => id !== task._id);\r\n      setLists((prevLists: TaskListDescription[]) =>\r\n        prevLists.map((list) =>\r\n          status !== list.status\r\n            ? list\r\n            : {\r\n                ...listToUpdate,\r\n                tasks: listToUpdate.tasks.filter((t) => t._id !== task._id),\r\n                displayOrder: Array.from(new Set(updatedDisplayOrder)),\r\n              }\r\n        )\r\n      );\r\n    },\r\n    [lists, setLists]\r\n  );\r\n\r\n  const moveTask = React.useCallback(\r\n    (\r\n      task: Task,\r\n      oldStatus: TaskStatus,\r\n      oldDisplayIndex: number,\r\n      newStatus: TaskStatus,\r\n      newDisplayIndex?: number\r\n    ) => {\r\n      removeTaskFromList(task, oldStatus);\r\n      addTaskToList(task, newStatus, newDisplayIndex);\r\n    },\r\n    [removeTaskFromList, addTaskToList]\r\n  );\r\n\r\n  const moveTaskInColumn = React.useCallback(\r\n    (task: Task, status: TaskStatus, newIndex: number) => {\r\n      const listToUpdate = findListForStatus(status)(lists);\r\n      if (!listToUpdate) return;\r\n      const oldIndex = listToUpdate.displayOrder.findIndex(\r\n        (id) => id === task._id\r\n      );\r\n      const updatedDisplayOrder: Array<Scalars[\"ObjectId\"]> = R.move(\r\n        oldIndex,\r\n        newIndex,\r\n        listToUpdate.displayOrder\r\n      );\r\n      setLists((prevLists: TaskListDescription[]) =>\r\n        prevLists.map((list) =>\r\n          status !== list.status\r\n            ? list\r\n            : {\r\n                ...listToUpdate,\r\n                displayOrder: Array.from(new Set(updatedDisplayOrder)),\r\n              }\r\n        )\r\n      );\r\n    },\r\n    [lists, setLists]\r\n  );\r\n\r\n  return {\r\n    addTasksToList,\r\n    removeTaskFromList,\r\n    moveTask,\r\n    moveTaskInColumn,\r\n  };\r\n}\r\n","/** @jsx jsx */\r\nimport * as React from \"react\";\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport styled from \"@emotion/styled\";\r\nimport { uiColors } from \"@leafygreen-ui/palette\";\r\nimport {\r\n  DragDropContext,\r\n  Droppable,\r\n  Draggable,\r\n  DropResult,\r\n  DragDropContextProps,\r\n} from \"react-beautiful-dnd\";\r\n\r\nimport { Task } from \"../types\";\r\nimport TaskCard, { DraftTaskCard } from \"./TaskCard\";\r\nimport { TaskStatus, TaskActions } from \"../hooks/useTasks\";\r\nimport useDraftTask from \"../hooks/useDraftTask\";\r\nimport useTaskLists from \"../hooks/useTaskLists\";\r\nimport { useRealmApp } from \"../realm/RealmApp\";\r\n\r\nexport const taskStatus = new Map<string, TaskStatus>([\r\n  [\"OPEN\", TaskStatus.Open],\r\n  [\"INPROGRESS\", TaskStatus.Inprogress],\r\n  [\"COMPLETE\", TaskStatus.Complete],\r\n]);\r\n\r\ninterface TaskListsProps {\r\n  tasks: Task[];\r\n  taskActions: TaskActions;\r\n  showDetail: (task: Task) => void;\r\n}\r\n\r\nexport function TaskLists(props: TaskListsProps): React.ReactElement {\r\n  const { tasks, taskActions, showDetail } = props;\r\n  const { lists, actions: listActions } = useTaskLists(tasks);\r\n\r\n  const onDragEnd = (result: DropResult) => {\r\n    // Parse the drag and drop DropResult\r\n    const {\r\n      draggableId: taskId,\r\n      destination: { droppableId: destinationStatus } = {\r\n        droppableId: null,\r\n      },\r\n    } = result;\r\n    // If there wasn't a valid drop destination, don't do anything\r\n    if (!destinationStatus) return;\r\n    // Manipulate the in-memory lists, preserving drag and drop order\r\n    listActions.handleDragAndDrop(result);\r\n    // Update the Task if it changed status\r\n    const newStatus = taskStatus.get(destinationStatus);\r\n    if (newStatus) {\r\n      taskActions\r\n        .updateTask(taskId, {\r\n          status: taskStatus.get(newStatus),\r\n        })\r\n        .catch((err) => {\r\n          listActions.undoDragAndDrop(result);\r\n        });\r\n    }\r\n  };\r\n  return (\r\n    <TaskListsContainer onDragEnd={onDragEnd}>\r\n      {lists.map(({ status, displayName, tasks, displayOrder }) => {\r\n        return (\r\n          <TaskList\r\n            key={status}\r\n            status={status}\r\n            displayName={displayName}\r\n            tasks={\r\n              displayOrder\r\n                .map((id) => tasks.find((t) => t._id === id) ?? undefined)\r\n                .filter(Boolean) as Task[]\r\n            }\r\n            taskActions={taskActions}\r\n            showDetail={showDetail}\r\n          />\r\n        );\r\n      })}\r\n    </TaskListsContainer>\r\n  );\r\n}\r\n\r\nconst TaskListsContainer: React.FC<DragDropContextProps> = ({\r\n  onDragEnd,\r\n  children,\r\n}) => {\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <div\r\n        css={css`\r\n          width: 100%;\r\n          height: 100%;\r\n          display: flex;\r\n          justify-content: center;\r\n          padding-top: 0px;\r\n        `}\r\n      >\r\n        {children}\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\ninterface TaskListProps {\r\n  status: TaskStatus;\r\n  displayName: string;\r\n  tasks: Task[];\r\n  taskActions: TaskActions;\r\n  showDetail: (task: Task) => void;\r\n}\r\nexport default function TaskList(props: TaskListProps): React.ReactElement {\r\n  const { user } = useRealmApp();\r\n  if(!user) {\r\n    throw new Error(\"TaskList may only render with a logged in user.\")\r\n  }\r\n  const { status, displayName, tasks, taskActions, showDetail } = props;\r\n  const [draft, draftActions] = useDraftTask(user, taskActions);\r\n\r\n  return (\r\n    <Droppable droppableId={status}>\r\n      {(provided) => (\r\n        <Layout ref={provided.innerRef} {...provided.droppableProps}>\r\n          <ListContainer>\r\n            <ListTitle>{displayName}</ListTitle>\r\n            {tasks.map((task, i) => (\r\n              <DraggableListItem\r\n                key={task._id}\r\n                id={task._id}\r\n                index={i}\r\n                onClick={() => {\r\n                  showDetail(task);\r\n                }}\r\n              >\r\n                <TaskCard task={task} />\r\n              </DraggableListItem>\r\n            ))}\r\n            {provided.placeholder}\r\n            {draft && (\r\n              <ListItem>\r\n                <DraftTaskCard draft={draft} draftActions={draftActions} />\r\n              </ListItem>\r\n            )}\r\n            {!draft && (\r\n              <ListButton\r\n                onClick={() =>\r\n                  draftActions.createDraft({\r\n                    status,\r\n                    name: \"\",\r\n                    assignee: user?.id ?? \"\",\r\n                  })\r\n                }\r\n              >\r\n                + Add Task\r\n              </ListButton>\r\n            )}\r\n          </ListContainer>\r\n        </Layout>\r\n      )}\r\n    </Droppable>\r\n  );\r\n}\r\n\r\nconst Layout = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1;\r\n  max-width: 512px;\r\n  margin: 10px 10px;\r\n`;\r\n\r\nconst ListTitle = styled.h2`\r\n  margin: 0;\r\n  margin-bottom: 16px;\r\n  font-size: 32px;\r\n  color: ${uiColors.black};\r\n`;\r\n\r\nconst ListContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 24px;\r\n  background: ${uiColors.gray.light1};\r\n  border-radius: 4px;\r\n  overflow-y: scroll;\r\n  max-height: 80vh;\r\n  :not(:last-child) {\r\n    margin-bottom: 8px;\r\n  }\r\n`;\r\nconst ListItem = styled.div`\r\n  :not(:last-child) {\r\n    margin-bottom: 16px;\r\n  }\r\n`;\r\n\r\ninterface DraggableListItemProps {\r\n  id: any;\r\n  index: number;\r\n  onClick: () => void;\r\n}\r\n\r\nconst DraggableListItem: React.FC<DraggableListItemProps> = ({\r\n  id,\r\n  index,\r\n  children,\r\n  onClick,\r\n}) => {\r\n  return (\r\n    <Draggable draggableId={id} index={index}>\r\n      {(provided) => (\r\n        <ListItem\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          onClick={onClick}\r\n        >\r\n          {children}\r\n        </ListItem>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nconst ListButton = styled.button`\r\n  padding: 8px;\r\n  border: none;\r\n  background: ${uiColors.white};\r\n  background: transparent;\r\n  border-radius: 4px;\r\n  font-size: 16px;\r\n  text-align: left;\r\n  font-weight: bold;\r\n  color: ${uiColors.gray.dark2};\r\n  :hover {\r\n    background: ${uiColors.gray.light2};\r\n  }\r\n`;\r\n","import * as React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { Maybe, Task } from \"../types\";\r\nimport { TaskStatus } from \"../hooks/useTasks\";\r\nimport { useRealmApp } from \"../realm/RealmApp\";\r\n\r\nimport { TaskActions } from \"../hooks/useTasks\";\r\nimport { TaskView } from \"./TaskView\";\r\nimport Modal from \"@leafygreen-ui/modal\";\r\nimport Button from \"@leafygreen-ui/button\";\r\n\r\ninterface TaskDetailProps {\r\n  task?: Maybe<Task>;\r\n  taskActions: TaskActions;\r\n}\r\n\r\ninterface TaskDetailModalProps {\r\n  task?: Maybe<Task>;\r\n  taskActions: TaskActions;\r\n  closeModal: () => void;\r\n}\r\nexport function TaskDetailModal({\r\n  task,\r\n  taskActions,\r\n  closeModal,\r\n}: TaskDetailModalProps): React.ReactElement {\r\n  const { user } = useRealmApp();\r\n\r\n  const changeTaskStatus = async (status: TaskStatus) => {\r\n    if (!task) return;\r\n    await taskActions.updateTask(task._id, { status });\r\n  };\r\n\r\n  const deleteTask = async (task: Task) => {\r\n    if (!task) return;\r\n    await taskActions.deleteTask(task);\r\n    closeModal();\r\n  };\r\n\r\n  return (\r\n    <PositionedModal\r\n      size=\"small\"\r\n      open={Boolean(task)}\r\n      shouldClose={() => {\r\n        closeModal();\r\n        return true;\r\n      }}\r\n    >\r\n      {task && (\r\n        <>\r\n          <TaskView task={task} />\r\n          {task?.status !== TaskStatus.Open && (\r\n            <FullWidthButton onClick={() => changeTaskStatus(TaskStatus.Open)}>\r\n              Move to Open\r\n            </FullWidthButton>\r\n          )}\r\n          {task?.status !== TaskStatus.Inprogress && (\r\n            <FullWidthButton\r\n              onClick={() => changeTaskStatus(TaskStatus.Inprogress)}\r\n            >\r\n              Move to In Progress\r\n            </FullWidthButton>\r\n          )}\r\n          {task?.status !== TaskStatus.Complete && (\r\n            <FullWidthButton\r\n              onClick={() => changeTaskStatus(TaskStatus.Complete)}\r\n            >\r\n              Move to Complete\r\n            </FullWidthButton>\r\n          )}\r\n          {task.assignee?._id === user?.id && (\r\n            <FullWidthButton variant=\"danger\" onClick={() => deleteTask(task)}>\r\n              Delete this task\r\n            </FullWidthButton>\r\n          )}\r\n        </>\r\n      )}\r\n    </PositionedModal>\r\n  );\r\n}\r\n\r\nconst PositionedModal = styled(Modal)`\r\n  > div {\r\n    top: 20%;\r\n  }\r\n`;\r\n\r\nconst FullWidthButton = styled(Button)`\r\n  width: 100%;\r\n  margin: 8px 0;\r\n`;\r\n\r\nexport function useTaskDetailView(\r\n  tasks: Task[]\r\n): [\r\n  React.FC<TaskDetailProps>,\r\n  {\r\n    show: (task: Task) => void;\r\n    close: () => void;\r\n  }\r\n] {\r\n  const [currentTask, setCurrentTask] = React.useState<Maybe<Task>>(null);\r\n  const updateCurrentTask = React.useCallback(\r\n    (tasks: Task[]) => {\r\n      if (currentTask) {\r\n        const task = tasks.find((t: Task) => t._id === currentTask._id);\r\n        if (task) setCurrentTask(task);\r\n      }\r\n    },\r\n    [currentTask]\r\n  );\r\n  React.useEffect(() => {\r\n    updateCurrentTask(tasks);\r\n  }, [tasks, updateCurrentTask]);\r\n\r\n  function show(task: Task) {\r\n    setCurrentTask(task);\r\n  }\r\n\r\n  function close() {\r\n    setCurrentTask(null);\r\n  }\r\n\r\n  const Component: React.FC<TaskDetailProps> = ({ taskActions }) => (\r\n    <TaskDetailModal\r\n      key={currentTask?._id}\r\n      task={currentTask}\r\n      taskActions={taskActions}\r\n      closeModal={close}\r\n    />\r\n  );\r\n\r\n  return [Component, { show, close }];\r\n}\r\n","import * as React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport Navbar from \"./Navbar\";\r\nimport { TaskLists } from \"./TaskLists\";\r\nimport { useTaskDetailView } from \"./TaskDetail\";\r\nimport { useTasks } from \"../hooks/useTasks\";\r\n\r\nconst Board: React.FC = () => {\r\n  const { tasks, loading, actions: taskActions } = useTasks();\r\n  const [TaskDetailView, { show }] = useTaskDetailView(tasks);\r\n\r\n  return (\r\n    <TaskBoard>\r\n      <Navbar />\r\n      {!loading && (\r\n        <TaskLists tasks={tasks} taskActions={taskActions} showDetail={show} />\r\n      )}\r\n      <TaskDetailView taskActions={taskActions} />\r\n    </TaskBoard>\r\n  );\r\n};\r\nexport default Board;\r\n\r\nconst TaskBoard = styled.div`\r\n  height: 100vh;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: left;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport RealmApp, { useRealmApp } from \"../realm/RealmApp\";\r\nimport RealmApolloProvider from \"../realm/RealmApolloProvider\";\r\nimport LoginScreen from \"./LoginScreen\";\r\nimport Board from \"./Board\";\r\n\r\nconst App: React.FC = (props) => {\r\n  return (\r\n    <RealmApp>\r\n      <AppContainer>\r\n        <RequireAuthentication />\r\n      </AppContainer>\r\n    </RealmApp>\r\n  );\r\n};\r\nexport default App;\r\n\r\nconst AppContainer = styled.div`\r\n  background-color: #282c34;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  font-size: calc(10px + 2vmin);\r\n  color: white;\r\n`;\r\n\r\nfunction RequireAuthentication() {\r\n  const app = useRealmApp();\r\n  if (!app) {\r\n    return <div>Loading</div>;\r\n  }\r\n  return app.user ? (\r\n    <RealmApolloProvider>\r\n      <Board />\r\n    </RealmApolloProvider>\r\n  ) : (\r\n    <LoginScreen />\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}